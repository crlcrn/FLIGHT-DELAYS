from datetime import datetime

import flet as ft

from database.DAO import DAO


class Controller:
    def __init__(self, view, model):
        # the view, with the graphical elements of the UI
        self._view = view
        # the model, which implements the logic of the program and holds the data
        self._model = model
        self._choiceAeroportoP = None
        self._choiceAeroportoA = None


    def handleAnalizza(self,e):

        nMinStr = self._view._txtInNumC.value

        try:
            nMin = int(nMinStr)

        except ValueError:
            self._view._txt_result.controls.append(ft.Text('Errore, inserisci un valore intero'))
            self._view.update_page()
            return

        self._model.buildGraph(nMin)
        nNodes, nEdges = self._model.getDetails()
        self._view._txt_result.controls.append(ft.Text('Grafo creato correttamente'))
        self._view._txt_result.controls.append(ft.Text(f'Il grafo ha {nNodes} nodi e {nEdges} archi'))

        self._view._ddAeroportoP.disabled = False
        self._view._ddAeroportoA.disabled = False
        self._view._btnCercaItinerario.disabled = False
        self._view._btnConnessi.disabled = False
        self._view._txtInNumTratte.disabled = False

        self.fillDD()

        self._view.update_page()



    def fillDD(self):
        aeroporti = DAO.getAllAirports()
        for a in aeroporti:
            self._view._ddAeroportoP.options.append(ft.dropdown.Option(f'{a}'))
            self._view._ddAeroportoA.options.append(ft.dropdown.Option(f'{a}'))

        self._view.update_page()

    def handleConnessi(self,e):
        aeroporto_p = self._view._ddAeroportoA.value

        if aeroporto_p is None:
            self._view._txt_result.controls.append(ft.Text("Selezionare un aereoporto di partenza"))
            self._view.update_page()
            return

        v0 = aeroporto_p
        vicini = self._model.getSortedVicini(v0)

        self._view._txt_result.controls.append(ft.Text(f"Ecco i vicini di {v0}"))
        for v in vicini:
            self._view._txt_result.controls.append(ft.Text(f"{v[1]} - {v[0]}"))


        self._view.update_page()

    def handleCercaItinerario(self,e):

        pass

    def handleTestConnessione(self,e):
        pass
